{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Mapping","tagline":"A container for DRY object mapping","google":"","body":"This is a simple container for object mapping\r\n\r\n[On NuGet](https://nuget.org/packages/antix-mapping)\r\n\r\nWhen you map your objects you get the container passed into the mapper too, this means you can call other mappings from inside your mapping and keep your code all nice and DRY\r\n\r\nHere are a couple of simple examples, *See the tests for more*\r\n\r\n### Basic Example\r\n\r\nGiven these simple classes which need mapping, model=>entity\r\n\r\n    public class PersonModel\r\n    {\r\n        public string Name { get; set; }\r\n        public ICollection<AddressModel> Addresses { get; set; }\r\n    }\r\n\r\n    public class AddressModel\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n\r\n    public class PersonEntity\r\n    {\r\n        public int Id { get; set; }\r\n        public string Name { get; set; }\r\n        public ICollection<AddressEntity> Addresses { get; set; }\r\n    }\r\n\r\n    public class AddressEntity : IEntity\r\n    {\r\n        public string Name { get; set; }\r\n    }\r\n\r\nSet up the container in your composite root as a single instance\r\n\r\n    var mapperContainer = new MapperContainer();\r\n\r\n    var mapperContainer\r\n        .Register<PersonModel, PersonEntity>(\r\n            (model, entity, context) =>\r\n                {\r\n                    entity.Name = model.Name;\r\n                    c.MapAll(model.Addresses, () => entity.Addresses);\r\n                })\r\n        .Register<AddressModel, AddressEntity>(\r\n            (model, entity, context) => \r\n\t\t\t\t{\r\n\t\t\t\t\tentity.Name = model.Name; \r\n\t\t\t\t}\r\n        );\r\n\r\nCreate a new context as required like so, this can all be hooked by your IoC container\r\n\r\n\tvar mapperContext = new MapperContext(mapperContainer);\r\n\r\nInject the mapping context where you need it\r\n\r\n\tpublic class PersonController : Controller \r\n\t{\r\n\t\tIMapperContext _mapperContext;\r\n\r\n\t\tpublic PersonController(IMapperContext mapperContext)\r\n\t\t{\r\n\t\t\t_mapperContext = mapperContext;\r\n\t\t}\r\n\r\n\t\tActionResult Update(PersonModel model) {\r\n\r\n\t\t\tvar entity = entityService.Load([SomeCriteria]);\r\n\r\n\t\t\t_mapperContext.Map(model, () => entity);\r\n\r\n\t\t\tentityService.Save(entity);\r\n\t\t}\r\n\t}\r\n\r\nIn this example the registered AddressModel => AddressEnity mapper is called for the collection of Addresses on the person\r\nBoth Person and Address sub-collection objects are mapped\r\n\r\n### EntityFramework Example\r\n\r\nYou can use the mapper in entity framework by making your DbContext derived class also implement IMappingContext\r\nIn this example the IMapperContainer is injected in to the DataContext object\r\n\r\n    public class DataContext : DbContext, IMapperContext\r\n    {\r\n        public DataContext(IMapperContainer container)\r\n        {\r\n            Container = container;\r\n        }\r\n\r\n        public IMapperContainer Container { get; private set; }\r\n\r\n        public T Create<T>()\r\n        {\r\n            // this function is called by the mapper when \r\n            // a new entity is needed\r\n            var set = Set(typeof (T));\r\n            return (T) set.Add(set.Create());\r\n        }\r\n\r\n        public void Update<T>(T entity)\r\n        {\r\n            // not required for EF\r\n        }\r\n\r\n        public void Delete<T>(T entity)\r\n        {\r\n            // this function is called by the mapper when \r\n            // an entity is deleted\r\n            var set = Set(typeof (T));\r\n            set.Remove(entity);\r\n        }\r\n\r\n            ... and other DbContext type stuff \r\n                  IDbSet<PersonEntity> People etc\r\n    }\r\n\r\nNow you can use the mapping extensions right on your data context\r\n\r\n\tvar dataContext = new DataContext(mappingContainer);\r\n\r\n\tdataContext.Map(model, () => entity);"}